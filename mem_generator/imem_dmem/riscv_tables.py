
# This returns the corresponding instruction type from a 7-bit opcode
instr_types_from_opcode = {
	0b0110011: 'R',
	0b0010011: 'I',
	0b0000011: "I_load",
	0b0100011: 'S',
	0b1100011: 'B',
	0b1101111: 'J',
	0b1100111: "I_jump",
	0b0110111: 'U',
	0b0010111: 'U',
	0b1110011: "I_environment",
	0b0101111: 'R'
}

# A dictionary of RISC-V instructions.
# Key is a tuple composed of opcode, funct3 and funct7, value is mnemonic.
instructions_rv32 = {
	(0x33, 0x0, 0x00): "add",
	(0x33, 0x0, 0x20): "sub",
	(0x33, 0x4, 0x00): "xor",
	(0x33, 0x6, 0x00): "or",
	(0x33, 0x7, 0x00): "and",
	(0x33, 0x1, 0x00): "sll",
	(0x33, 0x5, 0x00): "srl",
	(0x33, 0x5, 0x20): "sra",
	(0x33, 0x2, 0x00): "slt",
	(0x33, 0x3, 0x00): "sltu",
	(0x13, 0x0):       "addi",
	(0x13, 0x4):       "xori",
	(0x13, 0x6):       "ori",
	(0x13, 0x7):       "andi",
	(0x13, 0x1, 0x00): "slli",
	(0x13, 0x5, 0x00): "srli",
	(0x13, 0x5, 0x20): "srai",
	(0x13, 0x2): "slti",
	(0x13, 0x3): "sltiu",
	(0x03, 0x0): "lb",
	(0x03, 0x1): "lh",
	(0x03, 0x2): "lw",
	(0x03, 0x4): "lbu",
	(0x03, 0x5): "lhu",
	(0x23, 0x0): "sb",
	(0x23, 0x1): "sh",
	(0x23, 0x2): "sw",
	(0x23, 0x3): "sd",
	(0x63, 0x0): "beq",
	(0x63, 0x1): "bne",
	(0x63, 0x4): "blt",
	(0x63, 0x5): "bge",
	(0x63, 0x6): "bltu",
	(0x63, 0x7): "bgeu",
	0x6f:        "jal",
	(0x67, 0x0): "jalr",
	0x37:        "lui",
	0x17:        "auipc",
	(0x73, 0x0, 0x0): "ecall",
	(0x73, 0x0, 0x1): "ebreak",
	(0x33, 0x0, 0x01): "mul",
	(0x33, 0x1, 0x01): "mulh",
	(0x33, 0x2, 0x01): "mulsu",
	(0x33, 0x3, 0x01): "mulu",
	(0x33, 0x4, 0x01): "div",
	(0x33, 0x5, 0x01): "divu",
	(0x33, 0x6, 0x01): "rem",
	(0x33, 0x7, 0x01): "remu",
}
